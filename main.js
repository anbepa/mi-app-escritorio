const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const path = require('path');
const fs = require('fs'); // Importamos el m칩dulo fs para manejar archivos
const { spawn } = require('child_process');
const pty = require('node-pty');

// Diccionario de procesos pty por escenario
const ptyProcesses = {};

function createWindow() {
  const win = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false,
      sandbox: false
    },
    icon: path.join(__dirname, 'assets', 'icon.png'), // Opcional: icono personalizado
  });

  win.loadFile(path.join(__dirname, 'renderer', 'index.html'));
}

app.whenReady().then(() => {
  createWindow();

  app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

app.on('window-all-closed', function () {
  if (process.platform !== 'darwin') app.quit();
});

// Comunicaci칩n para abrir el di치logo de archivos
ipcMain.handle('dialog:openFile', async () => {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    filters: [{ name: 'CSV', extensions: ['csv'] }],
    properties: ['openFile']
  });
  if (canceled) {
    return null;
  } else {
    return filePaths[0];
  }
});

// --- [BLOQUE MODIFICADO] ---
ipcMain.on('terminal:open', (event, shell, shellArgs, idx) => {
  console.log(`Main: Solicitud para abrir terminal ${idx} con shell: ${shell}, args: ${shellArgs}`);
  const win = BrowserWindow.getFocusedWindow();
  if (ptyProcesses[idx]) {
    ptyProcesses[idx].kill();
    delete ptyProcesses[idx];
  }
  const userHomeDir = app.getPath('home');
  const subfolderName = 'MiAppTerminal';
  const workDir = path.join(userHomeDir, subfolderName);
  if (!fs.existsSync(workDir)) {
    fs.mkdirSync(workDir, { recursive: true });
  }
  // --- MODIFICACI칍N: Asegurar que /opt/homebrew/bin est칠 en el PATH ---
  const env = { ...process.env };
  if (!env.PATH.includes('/opt/homebrew/bin')) {
    env.PATH = env.PATH + ':/opt/homebrew/bin';
  }
  const ptyProcess = pty.spawn(shell, shellArgs || [], {
    name: 'xterm-color',
    cols: 80,
    rows: 24,
    cwd: workDir,
    env: env
  });
  ptyProcesses[idx] = ptyProcess;
  ptyProcess.on('data', (data) => {
    win.webContents.send('terminal:data', { idx, data });
  });
  ptyProcess.on('exit', () => {
    win.webContents.send('terminal:exit', idx);
    delete ptyProcesses[idx];
  });
});

ipcMain.on('terminal:input', (_event, input, idx) => {
  console.log(`Main: Recibido input para terminal ${idx}: '${input}'`);
  if (ptyProcesses[idx]) {
    ptyProcesses[idx].write(input);
    console.log(`Main: Escrito input en ptyProcesses[${idx}]`);
  } else {
    console.log(`Main: No se encontr칩 ptyProcess para idx ${idx}`);
  }
});

ipcMain.on('terminal:resize', (_event, cols, rows, idx) => {
  if (ptyProcesses[idx]) {
    ptyProcesses[idx].resize(cols, rows);
  }
});

ipcMain.handle('crear-gemini-md', async (_event, nombreEscenario, pasos) => {
  const userHomeDir = app.getPath('home');
  const subfolderName = 'MiAppTerminal';
  const workDir = path.join(userHomeDir, subfolderName);
  if (!fs.existsSync(workDir)) {
    fs.mkdirSync(workDir, { recursive: true });
  }
  const prompt = [
    '춰Hola! 游녦 Para ejecutar tu escenario de prueba, sigue los pasos a continuaci칩n usando Playwright MCP.',
    '',
    '## 郊윒잺 Paso 1: Login Autom치tico',
    'Utiliza las herramientas de Playwright MCP para realizar el login en la aplicaci칩n:',
    '- Usa `browser_navigate` para ir a la URL de login: https://saf-qa.apps.ambientesbc.com/disbursements',
    '2. Ingresar el correo electr칩nico: aabernal@ambientesbc.com y hacer clic en "Siguiente".',
    '3. Ingresar la contrase침a: 2025.Tester.2026 y hacer clic en "Iniciar sesi칩n".',
    '4. Verificar que el sistema muestra la pantalla "Aprobar solicitud de inicio de sesi칩n".',
    '5. Espere hasta que el usuario apruebe la sesi칩n.',
    '6. Recarga la p치gina.',
    '7. Verificar que el inicio de sesi칩n se completa y se muestra en la p치gina un texto que diga "SAF te da la bienvenida".',
    '',
    'IMPORTANTE: No contin칰es con los siguientes pasos hasta que el texto "SAF te da la bienvenida" sea visible en la p치gina. Si no aparece, sigue recargando la p치gina hasta que lo encuentres.',
    '',
    'Aseg칰rate de que el login se complete correctamente antes de continuar con los siguientes pasos.',
    '',
    '## 郊윒잺 Paso 2: Ejecuci칩n del Escenario de Prueba Autom치tico',
    'El sistema ahora ejecutar치 el escenario completo.',
    '',
    '1. Configuraci칩n de Lanzamiento del Navegador:',
    '',
    '- incognito: true',
    '- ignoreHTTPSErrors: true',
    '',
    '2. Creaci칩n del Directorio de Resultados:',
    '',
    `Se ejecutar치 el comando mkdir -p ${nombreEscenario} para crear la carpeta del escenario.`,
    '',
    '3. Ejecuci칩n de los Pasos de la Prueba:',
    '',
    'Usando las herramientas del MCP, realiza las siguientes acciones:',
    '',
    pasos,
    '',
    '4. Gesti칩n de Capturas de Pantalla:',
    '',
    `IMPORTANTE: Si la herramienta MCP guarda la captura de pantalla en una carpeta temporal, mu칠vela autom치ticamente a la carpeta del escenario (${nombreEscenario}) para que todas las evidencias queden centralizadas en la ruta correcta.`,
    ''
  ].join('\n');
  const filePath = path.join(workDir, 'GEMINI.md');
  fs.writeFileSync(filePath, prompt, 'utf-8');
  return filePath;
});

ipcMain.handle('verificar-gemini-md-existe', async () => {
  const userHomeDir = app.getPath('home');
  const subfolderName = 'MiAppTerminal';
  const workDir = path.join(userHomeDir, subfolderName);
  const filePath = path.join(workDir, 'GEMINI.md');
  return fs.existsSync(filePath);
});